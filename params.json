{"name":"Route.js","tagline":"Route.js allows executing JavaScript code in the browser under a specific url","body":"## Setup\r\nInclude the Route.js script in your HTML markup:\r\n\r\n```html\r\n<script src=\"js/route.min.js\"></script>\r\n```\r\n## Usage\r\nIn your application code, use the **route()** function like this:\r\n\r\n```js\r\n//if the browser url is /some/url\r\nroute(\"/some/url\", function(data)\r\n{\r\n  //this code will run\r\n});\r\n```\r\nYou can get the url parameters\r\n\r\n```js\r\n//if the browser url is /some/foo\r\nroute(\"/some/:id\", function(data)\r\n{\r\n  //this code will run and data.id is equal to 'foo'\r\n});\r\n```\r\nYou can use a wildcard to run the code in all the urls\r\n\r\n```js\r\nroute(\"*\", function(data)\r\n{\r\n  //this code will run in any url\r\n});\r\n```\r\n## API\r\nThe **route()** function accepts a string as first argument. The second argument must be a **callback** function, which is called if the first argument matchs with the browser url. The callback function receives only one argument, wich is an object with the url params.\r\n\r\n## License\r\nCopyright 2015 Juan Ignacio Gipponi. Licensed under the MIT License. See the LICENSE file for more information.\r\n","google":"UA-59027043-1","note":"Don't delete this file! It's used internally to help with page regeneration."}